>>> Book.objects.create(title = "C Sharp")
<Book: Book object (1)>
>>> Book.objects.all()
<QuerySet [<Book: Book object (1)>]>

>>> Book.objects.create(title="Java")
<Book: Book object (2)>

>>> Book.objects.create(title="Python")
<Book: Book object (3)>

>>> Book.objects.create(title="PHP")
<Book: Book object (4)>

>>> Book.objects.create(title="Ruby")
<Book: Book object (5)>

>>> Author.objects.create(first_name="Jane", last_name="Austen")
<Author: Author object (1)>

>>> Author.objects.create(first_name="Emily", last_name="Dickenson")
<Author: Author object (2)>

>>> Author.objects.create(first_name="Fyodor", last_name="Dostoevsky")
<Author: Author object (3)>

>>> Author.objects.create(first_name="William", last_name="Shakespeare")
<Author: Author object (4)>

>>> Author.objects.create(first_name="Lau", last_name="Tzu")
<Author: Author object (5)>

>>> exit()
(djangoPy3Env) Roberts-MBP:bookAuth creative$ python manage.py makemigrations
You are trying to add a non-nullable field 'notes' to author without a default; we can't do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py
Select an option: 1
Please enter the default value now, as valid Python
The datetime and django.utils.timezone modules are available, so you can do e.g. timezone.now
Type 'exit' to exit this prompt
>>> Notes
Invalid input: name 'Notes' is not defined
>>> 0
Migrations for 'bookAuthApp':
  bookAuthApp/migrations/0002_author_notes.py
    - Add field notes to author
(djangoPy3Env) Roberts-MBP:bookAuth creative$ python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, bookAuthApp, contenttypes, sessions
Running migrations:
  Applying bookAuthApp.0002_author_notes... OK
(djangoPy3Env) Roberts-MBP:bookAuth creative$ python manage.py shell
Python 3.9.0 (v3.9.0:9cf6752276, Oct  5 2020, 11:29:23) 
[Clang 6.0 (clang-600.0.57)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from bookAuthApp.models import *

>>> c = Book.objects.get(id=1)
>>> c.title = "C #"
>>> c.save()

>>> c = Author.objects.get(id=4)
>>> c.first_name = "Bill"
>>> c.save()

>>> author1 = Author.objects.get(id=1)

>>> author1.books.add(mybook)
>>> author1.save
<bound method Model.save of <Author: Author object (1)>>
>>> author1.save()
>>> print(author1)
Author object (1)
>>> for x in mybook.authors.all():
... print(x.first_name)
  File "<console>", line 2
    print(x.first_name)
    ^
IndentationError: expected an indented block
>>> cor x in mybook.authors.all():
  File "<console>", line 1
    cor x in mybook.authors.all():
        ^
SyntaxError: invalid syntax
>>>     
KeyboardInterrupt
>>> for x in mybook.authors.all():
...     print(x.first_name)
... 
Jane
>>> author1.books.add(Java)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Java' is not defined
>>> Books = book..objects.all()
  File "<console>", line 1
    Books = book..objects.all()
                 ^
SyntaxError: invalid syntax
>>> books = Book.objects.all()
>>> java = Books[1]
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Books' is not defined
>>> java = books[1]
>>> print(java.title)
Java
>>> author1.books.add(java)
>>> author2 = Author.objects.all()
>>> pritn(author2)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'pritn' is not defined
>>> author2 = Author.objects.get(id=2)
>>> author3 = Author.objects.get(id=3)
>>> author4 = Author.objects.get(id=4)
>>> author5 = Author.objects.get(id=5)
>>> Book.objects.all()
<QuerySet [<Book: Book object (1)>, <Book: Book object (2)>, <Book: Book object (3)>, <Book: Book object (4)>, <Book: Book object (5)>]>
>>> book3 = Book.objects.get(id=3)
>>> book4 = Book.objects.get(id=4)
>>> book5 = Book.objects.get(id=5)
>>> book1 = Book.objects.get(id=1)
>>> book2 = Book.objects.get(id=2)
>>> Book.objects.all()
<QuerySet [<Book: Book object (1)>, <Book: Book object (2)>, <Book: Book object (3)>, <Book: Book object (4)>, <Book: Book object (5)>]>

>>> author4.books.add(book1, book2, book3, book4, book5)

>>> author3.books.all()
<QuerySet [<Book: Book object (1)>, <Book: Book object (2)>, <Book: Book object (3)>, <Book: Book object (4)>]>

author5.books.add(book2)

#First Author 3rd Book
>>> author2.books.remove(book3)

>>> author3.books.all()
<QuerySet [<Book: Book object (1)>, <Book: Book object (2)>, <Book: Book object (3)>, <Book: Book object (4)>]>

>>> book5.authors.all()
<QuerySet [<Author: Author object (4)>, <Author: Author object (5)>]>